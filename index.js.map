{"version":3,"file":"index.js","sources":["../src/js/hero.js","../src/js/events.js","../src/js/feedbacks.js"],"sourcesContent":["import Swiper from 'swiper/bundle';\nimport 'swiper/css/bundle';\n\nconst heroSlider = new Swiper('.hero-slider', {\n  slidesPerView: 1,\n  slidesPerGroup: 1,\n\n  keyboard: {\n    enabled: true,\n    onlyInViewport: true,\n  },\n\n  navigation: {\n    nextEl: '.hero-button-next',\n    prevEl: '.hero-button-prev',\n  },\n});\n\nconst prevButton = document.querySelector('.hero-button-prev');\nconst nextButton = document.querySelector('.hero-button-next');\n\nfunction handleButtonClick(button) {\n  if (button) {\n    window.requestAnimationFrame(() => button.blur());\n  }\n}\n\nif (prevButton) {\n  prevButton.addEventListener('click', function () {\n    handleButtonClick(this);\n  });\n}\n\nif (nextButton) {\n  nextButton.addEventListener('click', function () {\n    handleButtonClick(this);\n  });\n}\n\n/*\ndocument.addEventListener('keydown', function (event) {\n  // 1. Перевіряємо, чи ми в області слайдера (щоб не конфліктувати з іншими стрілками)\n  // Використовуємо .hero-slider як загальний контейнер\n  const heroSlider = document.querySelector('.hero-slider');\n  const focusedElement = document.activeElement;\n\n  // Якщо фокус не знаходиться в слайдері або на кнопках, ігноруємо\n  const isFocusInsideSwiperArea =\n    heroSlider.contains(focusedElement) ||\n    (focusedElement && focusedElement.classList.contains('hero-slider-button'));\n\n  if (!isFocusInsideSwiperArea) {\n    return;\n  }\n\n  // 2. Встановлюємо фокус на відповідну кнопку\n  switch (event.key) {\n    case 'ArrowLeft':\n      if (\n        prevButton &&\n        !prevButton.classList.contains('swiper-button-disabled')\n      ) {\n        // Примусово встановлюємо фокус на кнопку \"Попередній\"\n        prevButton.focus();\n\n        // Додатково знімаємо фокус з кнопки \"Наступний\", якщо він там був\n        if (nextButton) nextButton.blur();\n      }\n      // Swiper сам перегорне слайд, оскільки keyboard: enabled: true\n      break;\n\n    case 'ArrowRight':\n      if (\n        nextButton &&\n        !nextButton.classList.contains('swiper-button-disabled')\n      ) {\n        // Примусово встановлюємо фокус на кнопку \"Наступний\"\n        nextButton.focus();\n\n        // Додатково знімаємо фокус з кнопки \"Попередній\", якщо він там був\n        if (prevButton) prevButton.blur();\n      }\n      // Swiper сам перегорне слайд\n      break;\n\n    default:\n      return;\n  }\n});\n*/\n/*\nconst prevButton = document.querySelector('.hero-button-prev');\nconst nextButton = document.querySelector('.hero-button-next');\n\nfunction handleButtonClick(button) {\n  if (button) window.requestAnimationFrame(() => button.blur());\n}\n\n// кліки мишкою\n[prevButton, nextButton].forEach(btn => {\n  btn?.addEventListener('click', function () {\n    handleButtonClick(this);\n  });\n});\n\n// ✅ клавіатурна навігація з урахуванням задізейблених кнопок\nfunction flashButton(btn) {\n  btn.classList.add('is-active');\n  setTimeout(() => btn.classList.remove('is-active'), 200);\n}\n\ndocument.addEventListener('keydown', e => {\n  if (e.key === 'ArrowRight' && swiper.activeIndex < swiper.slides.length - 1) {\n    console.log(swiper.activeIndex);\n    swiper.slideNext();\n    nextButton.focus();\n    flashButton(nextButton);\n  } else if (e.key === 'ArrowLeft' && swiper.activeIndex > 0) {\n    swiper.slidePrev();\n    prevButton.focus();\n    flashButton(prevButton);\n  }\n});\n\nswiper.on('slideChangeTransitionEnd', () => {\n  document.activeElement?.blur();\n});\n*/\n\n// document.addEventListener('keydown', e => {\n//   if (e.key === 'ArrowRight') {\n//     nextButton?.focus();\n//   } else if (e.key === 'ArrowLeft') {\n//     prevButton?.focus();\n//   }\n// });\n\n//**************************\n//**************************\n\n/*\n// базові стилі\nimport 'swiper/css';\nimport 'swiper/css/navigation';\n\n// імпорти модулів\nimport Swiper from 'swiper';\nimport { Navigation, A11y } from 'swiper/modules';\n\n// Ініціалізація:\nconst swiper = new Swiper('.hero-slider', {\n  modules: [Navigation, A11y], // НЕ додаємо Keyboard\n\n  slidesPerView: 1,\n  slidesPerGroup: 1,\n\n  navigation: {\n    nextEl: '.hero-button-next',\n    prevEl: '.hero-button-prev',\n  },\n\n  // a11y: false, // вимикає автофокус і прокрутку при фокусі\n});\n\ndocument.addEventListener('keydown', e => {\n  if (e.key === 'ArrowLeft') swiper.slidePrev();\n  if (e.key === 'ArrowRight') swiper.slideNext();\n});\n*/\n\n// const container = document.querySelector('.hero');\n\n// container.addEventListener('keydown', e => {\n//   if (e.key === 'Tab') {\n//     e.preventDefault();\n//   }\n// });\n/*\ndocument.querySelector('.hero-slider').addEventListener(\n  'keydown',\n  function (e) {\n    if (e.key === 'Tab' || e.keyCode === 9) e.stopImmediatePropagation();\n  },\n  true\n);\nповедінка не міняється\n*/\n\n// swiper.keyboard.disable();\n\n// // 1️⃣ Ініціалізація без Keyboard-модуля\n// const swiper = new Swiper('.hero-slider', {\n//   slidesPerView: 1,\n//   slidesPerGroup: 1,\n//   keyboard: {\n//     enabled: false, // <-- вимикаємо стандартну клавіатуру Swiper\n//   },\n//   navigation: {\n//     nextEl: '.hero-button-next',\n//     prevEl: '.hero-button-prev',\n//   },\n// });\n\n// // 2️⃣ Додаємо власну обробку стрілок\n// document.addEventListener('keydown', e => {\n//   // Ігноруємо, якщо користувач у полі введення\n//   const tag = document.activeElement?.tagName;\n//   if (\n//     tag === 'INPUT' ||\n//     tag === 'TEXTAREA' ||\n//     tag === 'SELECT' ||\n//     document.activeElement.isContentEditable\n//   )\n//     return;\n\n//   // Реакція тільки на стрілки\n//   if (e.key === 'ArrowLeft') {\n//     swiper.slidePrev();\n//   } else if (e.key === 'ArrowRight') {\n//     swiper.slideNext();\n//   }\n// });\n\n/*\ndocument.addEventListener('keydown', event => {\n  if (event.key === 'Tab') {\n    event.stopPropagation();\n  }\n});\nповедінка не міняється\n*/\n\n/*\nswiper.keyboard.onKeyDown = function (e) {\n  if (e.key === 'Tab') return; // ігноруємо Tab\n  swiper.keyboard.handle(e);\n};\nповедінка не міняється\n*/\n\n/*\nswiper.keyboard.handle = function (event) {\n  const { key } = event;\n\n\n  if (key === 'Tab' || key === 'TabLeft' || key === 'TabRight') {\n    return;\n  }\n\n\n  if (key === 'ArrowLeft') {\n    swiper.slidePrev();\n  } else if (key === 'ArrowRight') {\n    swiper.slideNext();\n  }\n};\nповедінка не міняється\n*/\n\n/*\ndocument.querySelectorAll('.hero-slider-link').forEach(link => {\n  link.addEventListener('focus', () => {\n    swiper.keyboard.disable();\n  });\n\n  link.addEventListener('blur', () => {\n    swiper.keyboard.enable();\n  });\n});\nповедінка не міняється\n*/\n\n/*\nДопоміжна функція: перевіряє, чи елемент видимий у вьюпорті (аналог onlyInViewport)\nfunction isElementInViewport(el) {\n  if (!el) return false;\n  const rect = el.getBoundingClientRect();\n  return (\n    rect.bottom > 0 &&\n    rect.top < (window.innerHeight || document.documentElement.clientHeight)\n  );\n}\n\nВласний обробник клавіш: реагує ТІЛЬКИ на ArrowLeft та ArrowRight,\n//     НЕ реагує на Tab і не зачіпає інші елементи вводу (input, textarea, select, contenteditable)\nfunction onDocumentKeyDown(e) {\n  const active = document.activeElement;\n  const activeTag =\n    active && active.tagName ? active.tagName.toLowerCase() : null;\n  const isEditable =\n    active &&\n    (active.isContentEditable ||\n      activeTag === 'input' ||\n      activeTag === 'textarea' ||\n      activeTag === 'select');\n\n  // Якщо фокус у редагованому полі — нічого не робимо\n  if (isEditable) return;\n\n  // Переконаємось, що наш слайдер в видимій частині сторінки\n  if (!isElementInViewport(document.querySelector('.hero-slider'))) return;\n\n  if (e.key === 'ArrowLeft' || e.key === 'Left') {\n    e.preventDefault(); // зупиняємо стандартну поведінку сторінки (опціонально)\n    // Перевіряємо чи можна рухатись назад\n    if (\n      !document\n        .querySelector('.hero-button-prev')\n        ?.classList.contains('swiper-button-disabled')\n    ) {\n      swiper.slidePrev();\n      // опційно: зсунути фокус на prev button, якщо потрібно:\n      // document.querySelector('.hero-button-prev')?.focus();\n    }\n  } else if (e.key === 'ArrowRight' || e.key === 'Right') {\n    e.preventDefault();\n    if (\n      !document\n        .querySelector('.hero-button-next')\n        ?.classList.contains('swiper-button-disabled')\n    ) {\n      swiper.slideNext();\n      // document.querySelector('.hero-button-next')?.focus();\n    }\n  }\n}\n\n// Підключаємо обробник на рівні документа (звичайна фаза)\ndocument.addEventListener('keydown', onDocumentKeyDown);\n*/\n\n// if (swiper.keyboard && swiper.keyboard._onDocumentKeyDown) {\n//   // Знімаємо внутрішній глобальний обробник Swiper\n//   document.removeEventListener('keydown', swiper.keyboard._onDocumentKeyDown);\n// }\n\n// console.log(window.swiper); //undefined\n\n// const el = document.querySelector('.hero-slider');\n// console.log('el:', el); //div\n// console.log(Object.keys(window).filter(k => /swiper/i.test(k))); //[]\n\n// console.dir(swiper);\n// console.dir(swiper.keyboard);\n\n// **************************\n// логувати перші 20 подій keydown з стеком\n/*\nlet i = 0;\nfunction inspector(e) {\n  if (i++ > 20) return;\n  console.groupCollapsed('keydown', e.key); //keydown Tab\n  console.trace(); //console.trace inspector\t@\thero.js:178\n  console.groupEnd();\n}\ndocument.addEventListener('keydown', inspector, true);\n*/\n/*\nМожливі варіанти, чому слайди все одно горталися при Tab\n\nФокус змінює активний елемент у DOM, і Swiper реагує через фокус/blur на своїй кнопці або контейнері (тобто не на keydown, а на зміну document.activeElement).\n\nSwiper обробляє клавіатуру всередині власного “loop” методу (через internal observer), який запускається під час “keyboard.enable()” і не через звичайний keydown listener.\n\nВикористовується “Accessibility module” (a11y) — він може керувати навігацією стрілками і фокусом незалежно від keyboard-модуля.\n*/\n\n// console.log(swiper.keyboard); //{enabled: true, enable: ƒ, disable: ƒ}\n\n// console.log(swiper.modules);\n\n// console.log(document.activeElement); //keydown Tab\n\n/*\nswiper.keyboard увімкнений → Swiper слухає клавіатуру.\n\nСеред модулів є Keyboard, Navigation, і A11y.\n\ndocument.activeElement під час натискання Tab — це сам document (тобто фокус ні на чому, тому Swiper приймає подію глобально).\n\nТобто поведінка, коли Tab гортáє слайди, спричинена саме модулем Keyboard, який обробляє всі keydown-події на document, не перевіряючи, яка саме клавіша.\n*/\n// console.log(Object.keys(swiper.keyboard)); //['enabled', 'enable', 'disable']\n","// import Swiper from 'swiper';\n// import 'swiper/css';\n// import 'swiper/css/pagination';\n// import { Navigation, Pagination, Keyboard } from 'swiper/modules';\nimport Swiper from 'swiper/bundle';\n\nconst eventsSlider = new Swiper('.events-swiper', {\n  // modules: [Navigation, Pagination, Keyboard],\n  pagination: {\n    el: '.swiper-pagination',\n    clickable: true,\n  },\n  navigation: {\n    nextEl: '.events-button-next',\n    prevEl: '.events-button-prev',\n  },\n  keyboard: {\n    enabled: true, // Увімкнути керування з клавіатури\n    onlyInViewport: true, // Працює лише коли слайдер у полі зору\n  },\n  grabCursor: true,\n  breakpoints: {\n    375: {\n      slidesPerView: 1,\n      spaceBetween: 20,\n    },\n    768: {\n      slidesPerView: 2,\n      spaceBetween: 24,\n    },\n    1440: {\n      slidesPerView: 3,\n      spaceBetween: 24,\n    },\n  },\n});\n\n//  JS-code for section Events Booksy\n\nconst eventList = document.querySelector('.events-list');\neventList.addEventListener('click', event => {\n  const openBtn = event.target.closest('.event-btn');\n  if (!openBtn) {\n    return;\n  }\n  const eventItem = openBtn.closest('.event-item');\n  if (!eventItem) {\n    return;\n  }\n  const eventTitle = eventItem.querySelector('.event-subtitle').textContent;\n  subtitleModal.textContent = eventTitle;\n\n  openBtnContactModal();\n});\n\nfunction openBtnContactModal() {\n  contactModal.classList.remove('window-is-invisible');\n  document.body.classList.add('not-scrolling-page');\n\n  document.addEventListener('keydown', onEscKeyPress);\n}\n\n/*\n          <img\n            class=\"events-image\"\n            src=\"/img/events/img-1x.jpg.jpg\"\n            srcset=\"\n              /img/events/img-1.jpg.jpg    1x,\n              /img/events/img-1.jpg@2x.jpg 2x\n            \"\n            alt=\"Cozy Book Club — The Midnight Library\"\n            class=\"event-img\"\n          />\n\n          прибрати в html дублюючі класи  class=\"events-image\"/class=\"event-img\"\n*/\n","import Swiper from 'swiper/bundle';\n\nconst feedbackSlider = new Swiper('.swiper-div', {\n  // modules: [Navigation, Pagination, Keyboard, Mousewheel],\n  loop: false,\n  spaceBetween: 24,\n\n  pagination: {\n    el: '.swiper-pagination',\n    clickable: true,\n  },\n\n  navigation: {\n    nextEl: '.feedbacks-button-next',\n    prevEl: '.feedbacks-button-prev',\n    addIcons: false,\n  },\n  keyboard: {\n    enabled: true,\n    onlyInViewport: true,\n  },\n\n  mousewheel: {\n    forceToAxis: true,\n  },\n\n  simulateTouch: true,\n\n  breakpoints: {\n    0: {\n      slidesPerView: 1,\n    },\n    768: {\n      slidesPerView: 2,\n    },\n    1440: {\n      slidesPerView: 3,\n    },\n  },\n});\n\nconst swiperUL = document.querySelector('.swiper-wrapper');\n\n// swiperUL.addEventListener('keydown', event => {\n//   if (event.key === 'Tab') {\n//     event.preventDefault();\n\n//     if (event.shiftKey) {\n//       swiper.slidePrev();\n//     } else {\n//       swiper.slideNext();\n//     }\n//   }\n// });\n"],"names":["Swiper","prevButton","nextButton","handleButtonClick","button","eventList","event","openBtn","eventItem","eventTitle","openBtnContactModal"],"mappings":"svBAGmB,IAAIA,EAAO,eAAgB,CAC5C,cAAe,EACf,eAAgB,EAEhB,SAAU,CACR,QAAS,GACT,eAAgB,EACjB,EAED,WAAY,CACV,OAAQ,oBACR,OAAQ,mBACT,CACH,CAAC,EAED,MAAMC,EAAa,SAAS,cAAc,mBAAmB,EACvDC,EAAa,SAAS,cAAc,mBAAmB,EAE7D,SAASC,EAAkBC,EAAQ,CAC7BA,GACF,OAAO,sBAAsB,IAAMA,EAAO,KAAM,CAAA,CAEpD,CAEIH,GACFA,EAAW,iBAAiB,QAAS,UAAY,CAC/CE,EAAkB,IAAI,CAC1B,CAAG,EAGCD,GACFA,EAAW,iBAAiB,QAAS,UAAY,CAC/CC,EAAkB,IAAI,CAC1B,CAAG,EC9BkB,IAAIH,EAAO,iBAAkB,CAEhD,WAAY,CACV,GAAI,qBACJ,UAAW,EACZ,EACD,WAAY,CACV,OAAQ,sBACR,OAAQ,qBACT,EACD,SAAU,CACR,QAAS,GACT,eAAgB,EACjB,EACD,WAAY,GACZ,YAAa,CACX,IAAK,CACH,cAAe,EACf,aAAc,EACf,EACD,IAAK,CACH,cAAe,EACf,aAAc,EACf,EACD,KAAM,CACJ,cAAe,EACf,aAAc,EACf,CACF,CACH,CAAC,EAID,MAAMK,EAAY,SAAS,cAAc,cAAc,EACvDA,EAAU,iBAAiB,QAASC,GAAS,CAC3C,MAAMC,EAAUD,EAAM,OAAO,QAAQ,YAAY,EACjD,GAAI,CAACC,EACH,OAEF,MAAMC,EAAYD,EAAQ,QAAQ,aAAa,EAC/C,GAAI,CAACC,EACH,OAEF,MAAMC,EAAaD,EAAU,cAAc,iBAAiB,EAAE,YAC9D,cAAc,YAAcC,EAE5BC,GACF,CAAC,EAED,SAASA,GAAsB,CAC7B,aAAa,UAAU,OAAO,qBAAqB,EACnD,SAAS,KAAK,UAAU,IAAI,oBAAoB,EAEhD,SAAS,iBAAiB,UAAW,aAAa,CACpD,CC1DuB,IAAIV,EAAO,cAAe,CAE/C,KAAM,GACN,aAAc,GAEd,WAAY,CACV,GAAI,qBACJ,UAAW,EACZ,EAED,WAAY,CACV,OAAQ,yBACR,OAAQ,yBACR,SAAU,EACX,EACD,SAAU,CACR,QAAS,GACT,eAAgB,EACjB,EAED,WAAY,CACV,YAAa,EACd,EAED,cAAe,GAEf,YAAa,CACX,EAAG,CACD,cAAe,CAChB,EACD,IAAK,CACH,cAAe,CAChB,EACD,KAAM,CACJ,cAAe,CAChB,CACF,CACH,CAAC,EAEgB,SAAS,cAAc,iBAAiB"}